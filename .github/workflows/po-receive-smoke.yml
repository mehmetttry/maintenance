name: PO Receive Smoke
on:
  workflow_dispatch:
  push:

jobs:
  smoke:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "backend/requirements.txt") {
            python -m pip install -r backend/requirements.txt
          }
          python -m pip install uvicorn "SQLAlchemy>=2" fastapi python-dotenv httpx

      - name: Seed demo data (best-effort)
        shell: pwsh
        env:
          DATABASE_URL: sqlite:///./test.db
          MSSQL_DSN: sqlite:///./test.db
        run: |
          $ErrorActionPreference = 'Continue'
          if (Test-Path "backend\scripts\seed_demo.py") {
            Push-Location backend
            $env:DATABASE_URL = $env:MSSQL_DSN
            python .\scripts\seed_demo.py
            Pop-Location
          }
          exit 0

      - name: Start API (Uvicorn) in background
        shell: pwsh
        env:
          API_BASE: http://127.0.0.1:8011
        run: |
          $ErrorActionPreference = 'Stop'
          $apiPort = 8011
          $apiHost = "127.0.0.1"

          $pidFile = Join-Path $env:RUNNER_TEMP 'uvicorn_pid.txt'
          $outLog = Join-Path $env:RUNNER_TEMP 'uvicorn_out.log'
          $errLog = Join-Path $env:RUNNER_TEMP 'uvicorn_err.log'

          # CI ortamı için .env dosyası oluştur
          $wd = (Resolve-Path backend)
          $envFile = Join-Path $wd '.env.ci'
          @"
MSSQL_DSN=sqlite:///./test.db
DATABASE_URL=sqlite:///./test.db
JWT_SECRET=test-secret-for-ci
API_BASE=http://127.0.0.1:8011
"@ | Set-Content -Path $envFile -Encoding UTF8

          # Uvicorn'ı backend klasöründen başlat (app.main:app)
          $args = @(
            "-m","uvicorn","app.main:app",
            "--host",$apiHost,"--port",$apiPort,
            "--log-level","info",
            "--env-file",".env.ci"
          )

          $p = Start-Process -FilePath "python" -ArgumentList $args -WorkingDirectory $wd -RedirectStandardOutput $outLog -RedirectStandardError $errLog -PassThru
          $p.Id | Set-Content -Path $pidFile -Encoding ascii

          # Health bekle
          $health = "$env:API_BASE/health"
          $ok = $false
          foreach ($i in 1..60) {
            try {
              Invoke-WebRequest -Uri $health -UseBasicParsing -TimeoutSec 3 | Out-Null
              $ok = $true; break
            } catch {
              Start-Sleep -Seconds 2
            }
          }
          if (-not $ok) {
            Write-Host "----- uvicorn_out.log (last 200) -----"
            if (Test-Path $outLog) { Get-Content $outLog -Tail 200 | Write-Host }
            Write-Host "----- uvicorn_err.log (last 200) -----"
            if (Test-Path $errLog) { Get-Content $errLog -Tail 200 | Write-Host }
            throw "API health endpoint is not ready: $health"
          }

      - name: Verify API before smoketest (preflight)
        shell: pwsh
        env:
          API_BASE: http://127.0.0.1:8011
        run: |
          $ErrorActionPreference = 'Stop'
          Invoke-WebRequest "$env:API_BASE/health" -UseBasicParsing -TimeoutSec 3 | Out-Null

      - name: Run PO Receive smoketest
        shell: pwsh
        env:
          API_BASE: http://127.0.0.1:8011
        run: |
          $ErrorActionPreference = 'Stop'
          if (Test-Path ".\backend\tests\po-receive-smoketest.ps1") {
            .\backend\tests\po-receive-smoketest.ps1 -Api $env:API_BASE -PartId 1 -Cleanup -CI
          } else {
            Write-Host "Smoketest script not found, skipping."
          }

      - name: Dump Uvicorn logs if failed
        if: failure()
        shell: pwsh
        run: |
          $outLog = Join-Path $env:RUNNER_TEMP 'uvicorn_out.log'
          $errLog = Join-Path $env:RUNNER_TEMP 'uvicorn_err.log'
          Write-Host "----- uvicorn_out.log (last 200) -----"
          if (Test-Path $outLog) { Get-Content $outLog -Tail 200 | Write-Host }
          Write-Host "----- uvicorn_err.log (last 200) -----"
          if (Test-Path $errLog) { Get-Content $errLog -Tail 200 | Write-Host }

      - name: Stop API
        if: always()
        shell: pwsh
        run: |
          $pidFile = Join-Path $env:RUNNER_TEMP 'uvicorn_pid.txt'
          if (Test-Path $pidFile) {
            $uv_pid = Get-Content $pidFile | Select-Object -First 1
            try { Stop-Process -Id $uv_pid -Force -ErrorAction SilentlyContinue } catch {}
          }
          Get-Process -Name python -ErrorAction SilentlyContinue | Stop-Process -Force
