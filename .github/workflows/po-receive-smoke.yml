name: PO Receive Smoke
on:
  workflow_dispatch:
  push:

jobs:
  smoke:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r backend/requirements.txt
          python -m pip install "uvicorn>=0.22" "SQLAlchemy>=2" "fastapi>=0.110" "python-dotenv>=1"

      - name: Seed demo data (best-effort)
        env:
          DATABASE_URL: sqlite:///./test.db
          MSSQL_DSN:   sqlite:///./test.db
        run: |
          $ErrorActionPreference = 'Continue'
          if (Test-Path "backend/scripts/seed_demo.py") {
            Write-Host "Running seed script..."
            $code = "import os,runpy; os.chdir('backend'); os.environ['PYTHONPATH']=os.getcwd(); runpy.run_path('scripts/seed_demo.py', run_name='__main__')"
            python -c "$code"
          } else {
            Write-Host "Seed script not found. Skipping."
          }
          $global:LASTEXITCODE = 0

      - name: Start API (Uvicorn) in background
        env:
          DATABASE_URL: sqlite:///./test.db
          MSSQL_DSN:   sqlite:///./test.db
        run: |
          $ErrorActionPreference = 'Stop'
          $apiPort = 8011
          $apiHost = "127.0.0.1"
          $log = "$env:RUNNER_TEMP\uvicorn.log"
          Write-Host "Starting Uvicorn on http://$apiHost`:$apiPort"

          $job = Start-Job -ScriptBlock {
            param($logPath, $dsn)
            Set-Location "backend"
            $env:MSSQL_DSN    = $dsn
            $env:DATABASE_URL = $dsn
            python -m uvicorn app.main:app --host 127.0.0.1 --port 8011 2>&1 | Tee-Object -FilePath $logPath
          } -ArgumentList $log, "sqlite:///./test.db"

          # İlk health bekleyişi
          $health = "http://$apiHost`:$apiPort/health"
          $ok = $false
          foreach ($i in 1..60) {
            try {
              $r = Invoke-WebRequest -Uri $health -UseBasicParsing -TimeoutSec 3
              if ($r.StatusCode -eq 200) { $ok = $true; break }
            } catch { Start-Sleep -Seconds 2 }
          }

          if (-not $ok) {
            Write-Host "---- Uvicorn log (startup) ----"
            Get-Content $log -ErrorAction SilentlyContinue | Out-Host
            Receive-Job $job -Keep | Out-Host
            Stop-Job -Id $job.Id -ErrorAction SilentlyContinue | Out-Null
            throw "API health endpoint is not ready: $health"
          }

          Set-Content -Path "$env:RUNNER_TEMP\uvicorn_job_id.txt" -Value $job.Id -Encoding ascii
          Set-Content -Path "$env:RUNNER_TEMP\uvicorn_log_path.txt" -Value $log -Encoding ascii

      - name: Run PO Receive smoketest
        env:
          API_BASE: http://127.0.0.1:8011
        run: |
          $ErrorActionPreference = 'Stop'
          $Api = "http://127.0.0.1:8011"
          Write-Host "Using API = $Api"

          # Smoketest'ten hemen önce tekrar health kontrolü
          $health = "$Api/health"
          $ok = $false
          foreach ($i in 1..10) {
            try {
              $r = Invoke-WebRequest -Uri $health -UseBasicParsing -TimeoutSec 3
              if ($r.StatusCode -eq 200) { $ok = $true; break }
            } catch { Start-Sleep -Seconds 1 }
          }
          if (-not $ok) {
            Write-Host "---- Uvicorn log (pre-smoketest) ----"
            if (Test-Path "$env:RUNNER_TEMP\uvicorn_log_path.txt") {
              $log = Get-Content "$env:RUNNER_TEMP\uvicorn_log_path.txt" | Select-Object -First 1
              Get-Content $log -ErrorAction SilentlyContinue | Out-Host
            }
            throw "API is not responding just before smoketest: $health"
          }

          # Asıl test
          .\backend\tests\po-receive-smoketest.ps1 -PartId 1 -Cleanup -CI

      - name: Stop API
        if: always()
        run: |
          if (Test-Path "$env:RUNNER_TEMP\uvicorn_job_id.txt") {
            $jid = Get-Content "$env:RUNNER_TEMP\uvicorn_job_id.txt" | Select-Object -First 1
            try { Stop-Job -Id $jid -ErrorAction SilentlyContinue | Out-Null } catch {}
            Receive-Job -Id $jid -Keep -ErrorAction SilentlyContinue | Out-Host
          }
          Get-Process -Name python -ErrorAction SilentlyContinue | Stop-Process
