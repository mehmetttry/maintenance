name: PO Receive Smoke
on:
  workflow_dispatch:
  push:

jobs:
  smoke:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if (Test-Path "backend/requirements.txt") {
            python -m pip install -r backend/requirements.txt
          }
          python -m pip install uvicorn "SQLAlchemy>=2" fastapi python-dotenv httpx `
            "passlib[bcrypt]==1.7.4" "bcrypt==3.2.2" "python-jose[cryptography]"

      - name: Seed demo data (best-effort)
        shell: pwsh
        env:
          DATABASE_URL: sqlite:///./test.db
          MSSQL_DSN: sqlite:///./test.db
        run: |
          $ErrorActionPreference = 'Continue'
          if (Test-Path "backend\scripts\seed_demo.py") {
            Push-Location backend
            $env:DATABASE_URL = $env:MSSQL_DSN
            python .\scripts\seed_demo.py
            Pop-Location
          }
          exit 0

      - name: Start API & run smoketest
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $apiHost = "127.0.0.1"
          $apiPort = 8011
          $api     = "http://$apiHost`:$apiPort"
          $wd      = (Resolve-Path backend)

          # .env.ci
          $envFile = Join-Path $wd '.env.ci'
          $envText = "MSSQL_DSN=sqlite:///./test.db`nDATABASE_URL=sqlite:///./test.db`nJWT_SECRET=test-secret-for-ci`nAPI_BASE=$api"
          Set-Content -Path $envFile -Value $envText -Encoding UTF8

          $outLog = Join-Path $env:RUNNER_TEMP 'uvicorn_out.log'
          $errLog = Join-Path $env:RUNNER_TEMP 'uvicorn_err.log'

          $args = @(
            "-m","uvicorn","app.main:app",
            "--host",$apiHost,"--port",$apiPort,
            "--log-level","info",
            "--env-file",".env.ci"
          )

          $p = Start-Process -FilePath "python" -ArgumentList $args -WorkingDirectory $wd -RedirectStandardOutput $outLog -RedirectStandardError $errLog -PassThru

          try {
            # health
            $health = "$api/health"
            foreach ($i in 1..60) {
              try { Invoke-WebRequest -Uri $health -UseBasicParsing -TimeoutSec 3 | Out-Null; break }
              catch { Start-Sleep -Seconds 1 }
              if ($i -eq 60) { throw "API not healthy: $health" }
            }

            # login (form-encoded). Gerekirse SQLite'a doğrudan kullanıcı ekle (SYSDATETIME() defaultunu bypass).
            $demoUser = "demo"
            $demoPass = "demo123"
            $form = @{ username=$demoUser; password=$demoPass }

            $needSeed = $false
            try {
              $tok = (Invoke-RestMethod "$api/auth/login" -Method Post -ContentType 'application/x-www-form-urlencoded' -Body $form).access_token
            } catch {
              $needSeed = $true
            }

            if ($needSeed) {
              $py = @"
import os, sqlite3
from passlib.hash import bcrypt
db = os.path.join('backend','test.db')
con = sqlite3.connect(db)
cur = con.cursor()
cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='AppUser'")
if cur.fetchone():
    cols = [r[1] for r in cur.execute("PRAGMA table_info('AppUser')")]
    exists = cur.execute("SELECT 1 FROM AppUser WHERE Username=?", ('demo',)).fetchone()
    if not exists:
        hp = bcrypt.hash('demo123')
        if 'CreatedAt' in cols:
            cur.execute('INSERT OR IGNORE INTO "AppUser" ("Username","FullName","Email","HashedPassword","Role","IsActive","CreatedAt") VALUES (?,?,?,?,?,1,datetime("now"))',
                        ('demo','CI Demo',None,hp,'admin'))
        else:
            cur.execute('INSERT OR IGNORE INTO "AppUser" ("Username","FullName","Email","HashedPassword","Role","IsActive") VALUES (?,?,?,?,?,1)',
                        ('demo','CI Demo',None,hp,'admin'))
        con.commit()
con.close()
"@
              $tmp = Join-Path $env:RUNNER_TEMP 'seed_user_ci.py'
              Set-Content -Path $tmp -Value $py -Encoding UTF8
              python $tmp

              $tok = (Invoke-RestMethod "$api/auth/login" -Method Post -ContentType 'application/x-www-form-urlencoded' -Body $form).access_token
            }

            if (-not $tok) { throw "Login failed" }
            $env:CI_BEARER = $tok

            # Smoketest
            $ps1 = ".\backend\tests\po-receive-smoketest.ps1"
            if (Test-Path $ps1) {
              $src = Get-Content $ps1 -Raw
              $patched = $src -replace '(?s)\$__tok\s*=\s*\(Invoke-RestMethod.*?/auth/login.*?\)', '$__tok = $env:CI_BEARER'
              if ($patched -eq $src) { $patched = $src -replace '(?m)^.*?/auth/login.*$', '$__tok = $env:CI_BEARER' }
              Set-Content $ps1 $patched -Encoding UTF8
              & $ps1 -Api $api -PartId 1 -Cleanup -CI
            } else {
              Write-Host "Smoketest script not found, skipping."
            }
          }
          finally {
            try { Stop-Process -Id $p.Id -Force -ErrorAction SilentlyContinue } catch {}
            if (Test-Path $outLog) { Write-Host "----- uvicorn_out.log (last 200) -----"; Get-Content $outLog -Tail 200 | Write-Host }
            if (Test-Path $errLog) { Write-Host "----- uvicorn_err.log (last 200) -----"; Get-Content $errLog -Tail 200 | Write-Host }
          }
