name: PO Receive Smoke
on:
  workflow_dispatch:
  push:

jobs:
  smoke:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if (Test-Path "backend/requirements.txt") {
            python -m pip install -r backend/requirements.txt
          }
          python -m pip install uvicorn "SQLAlchemy>=2" fastapi python-dotenv httpx `
            "passlib[bcrypt]==1.7.4" "bcrypt==3.2.2" "python-jose[cryptography]"

      - name: Seed demo data (best-effort)
        shell: pwsh
        env:
          DATABASE_URL: sqlite:///./test.db
          MSSQL_DSN: sqlite:///./test.db
        run: |
          $ErrorActionPreference = 'Continue'
          if (Test-Path "backend\scripts\seed_demo.py") {
            Push-Location backend
            $env:DATABASE_URL = $env:MSSQL_DSN
            python .\scripts\seed_demo.py
            Pop-Location
          }
          exit 0

      - name: Start API & run smoketest
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $apiHost = "127.0.0.1"
          $apiPort = 8011
          $api     = "http://$apiHost`:$apiPort"
          $wd      = (Resolve-Path backend)

          # .env.ci
          $envFile = Join-Path $wd '.env.ci'
          $envText = "MSSQL_DSN=sqlite:///./test.db`nDATABASE_URL=sqlite:///./test.db`nJWT_SECRET=test-secret-for-ci`nAPI_BASE=$api"
          Set-Content -Path $envFile -Value $envText -Encoding UTF8

          $outLog = Join-Path $env:RUNNER_TEMP 'uvicorn_out.log'
          $errLog = Join-Path $env:RUNNER_TEMP 'uvicorn_err.log'

          $args = @(
            "-m","uvicorn","app.main:app",
            "--host",$apiHost,"--port",$apiPort,
            "--log-level","info",
            "--env-file",".env.ci"
          )
          $p = Start-Process -FilePath "python" -ArgumentList $args -WorkingDirectory $wd `
               -RedirectStandardOutput $outLog -RedirectStandardError $errLog -PassThru

          try {
            # health
            $health = "$api/health"
            foreach ($i in 1..60) {
              try { Invoke-WebRequest -Uri $health -UseBasicParsing -TimeoutSec 3 | Out-Null; break }
              catch { Start-Sleep -Seconds 1 }
              if ($i -eq 60) { throw "API not healthy: $health" }
            }

            # --- DB şema + demo kayıtları (geniş import + fallback tablolar) ---
            $prep = Join-Path $env:RUNNER_TEMP 'prep_db_ci.py'
            $py = @(
              'import os, sys, sqlite3, importlib, pkgutil',
              'from pathlib import Path',
              'root = Path.cwd()',
              "db_path = root / 'backend' / 'test.db'",
              'os.environ["DATABASE_URL"] = f"sqlite:///{db_path.as_posix()}"',
              'os.environ["MSSQL_DSN"] = os.environ["DATABASE_URL"]',
              'sys.path.insert(0, str(root / "backend"))',
              'try:',
              '    from sqlalchemy import create_engine',
              '    eng = create_engine(os.environ["DATABASE_URL"])',
              '    Base = None',
              '    # Tum app.* modullerini ice aktar ki tum modeller yüklensin',
              '    try:',
              '        import app',
              '        for _, name, _ in pkgutil.walk_packages(app.__path__, app.__name__ + "."):',
              '            try: importlib.import_module(name)',
              '            except Exception: pass',
              '    except Exception: pass',
              '    # Base i cesitli yerlerden bulmayi dene',
              '    for modname in ("app.core.database","app.database","app.db","app.models","app"):',
              '        try:',
              '            m = importlib.import_module(modname)',
              '            if getattr(m, "Base", None) is not None:',
              '                Base = m.Base; break',
              '        except Exception: pass',
              '    if Base is not None:',
              '        Base.metadata.create_all(bind=eng)',
              'except Exception: pass',
              'con = sqlite3.connect(str(db_path)); cur = con.cursor()',
              # temel tablolar
              'cur.execute("CREATE TABLE IF NOT EXISTS ""Part"" (""PartID"" INTEGER PRIMARY KEY AUTOINCREMENT, ""PartCode"" TEXT, ""PartName"" TEXT, ""Unit"" TEXT, ""MinStock"" INTEGER DEFAULT 0, ""CurrentStock"" INTEGER DEFAULT 0, ""IsActive"" INTEGER DEFAULT 1)")',
              'cur.execute("CREATE TABLE IF NOT EXISTS ""AppUser"" (""UserID"" INTEGER PRIMARY KEY AUTOINCREMENT, ""Username"" TEXT UNIQUE, ""FullName"" TEXT, ""Email"" TEXT, ""HashedPassword"" TEXT, ""Role"" TEXT, ""IsActive"" INTEGER DEFAULT 1, ""CreatedAt"" TEXT)")',
              'cur.execute("CREATE TABLE IF NOT EXISTS ""Supplier"" (""SupplierID"" INTEGER PRIMARY KEY AUTOINCREMENT, ""Name"" TEXT, ""Phone"" TEXT, ""Email"" TEXT, ""IsActive"" INTEGER DEFAULT 1)")',
              # PurchaseOrder şemasını kontrol et; POID yoksa tabloyu düşür ve doğru şemayla yarat
              'cols = [c[1] for c in cur.execute("PRAGMA table_info(""PurchaseOrder"")").fetchall()]',
              'if cols and "POID" not in cols:',
              '    cur.execute("DROP TABLE IF EXISTS ""PurchaseOrder""")',
              'cur.execute("CREATE TABLE IF NOT EXISTS ""PurchaseOrder"" (""POID"" INTEGER PRIMARY KEY AUTOINCREMENT, ""SupplierID"" INTEGER, ""PartID"" INTEGER, ""Qty"" INTEGER, ""UnitPrice"" REAL, ""PODate"" TEXT, ""ETA"" TEXT, ""Status_s"" TEXT)")',
              # WarehouseTxn şemasını kontrol et; gerekli kolonlar yoksa tabloyu düşürüp doğru şemayla yarat
              'colsW = [c[1] for c in cur.execute("PRAGMA table_info(""WarehouseTxn"")").fetchall()]',
              'needW = {"TxnID","PartID","TxnType","Quantity","TxnDate","Reason","WorkOrderID"}',
              'if colsW and not needW.issubset(set(colsW)):',
              '    cur.execute("DROP TABLE IF EXISTS ""WarehouseTxn""")',
              'cur.execute("CREATE TABLE IF NOT EXISTS ""WarehouseTxn"" (""TxnID"" INTEGER PRIMARY KEY AUTOINCREMENT, ""PartID"" INTEGER, ""TxnType"" TEXT, ""Quantity"" INTEGER, ""TxnDate"" TEXT, ""Reason"" TEXT, ""WorkOrderID"" INTEGER)")',
              'con.commit()',
              'con.close()'
            )
            [System.IO.File]::WriteAllLines($prep, $py)
            python $prep

            # --- AppUser: demo/demo123 ---
            $seedUser = Join-Path $env:RUNNER_TEMP 'seed_user_ci.py'
            $py2 = @(
              'import os, sqlite3',
              'from passlib.hash import bcrypt',
              "db = os.path.join('backend','test.db')",
              'con = sqlite3.connect(db); cur = con.cursor()',
              'hp = bcrypt.hash("demo123")',
              'cur.execute("INSERT OR IGNORE INTO ""AppUser"" (""Username"",""FullName"",""Email"",""HashedPassword"",""Role"",""IsActive"",""CreatedAt"") VALUES (?,?,?,?,?,1,datetime(''now''))", ("demo","CI Demo",None,hp,"admin"))',
              'con.commit(); con.close()'
            )
            [System.IO.File]::WriteAllLines($seedUser, $py2)
            python $seedUser

            # --- Supplier: ID=1 ve ID=2 ekle ---
            $seedSup = Join-Path $env:RUNNER_TEMP 'seed_supplier_ci.py'
            $pyS = @(
              'import os, sqlite3',
              "db = os.path.join('backend','test.db')",
              'con = sqlite3.connect(db); cur = con.cursor()',
              'cur.execute("INSERT OR IGNORE INTO ""Supplier"" (""SupplierID"",""Name"",""Phone"",""Email"",""IsActive"") VALUES (1,?,?,?,1)", ("Demo Tedarikci A","000","a@example.com"))',
              'cur.execute("INSERT OR IGNORE INTO ""Supplier"" (""SupplierID"",""Name"",""Phone"",""Email"",""IsActive"") VALUES (2,?,?,?,1)", ("Demo Tedarikci B","000","b@example.com"))',
              'con.commit(); con.close()'
            )
            [System.IO.File]::WriteAllLines($seedSup, $pyS)
            python $seedSup

            # --- Part: ID=1 varsa bırak, yoksa ekle ---
            $seedPart = Join-Path $env:RUNNER_TEMP 'seed_part_ci.py'
            $py3 = @(
              'import os, sqlite3',
              "db = os.path.join('backend','test.db')",
              'con = sqlite3.connect(db); cur = con.cursor()',
              'ex = cur.execute("SELECT 1 FROM ""Part"" WHERE ""PartID""=1").fetchone()',
              'if not ex:',
              '    cur.execute("INSERT INTO ""Part"" (""PartID"",""PartCode"",""PartName"",""Unit"",""MinStock"",""CurrentStock"",""IsActive"") VALUES (1,?,?,?,?,?,1)", ("DEMO-001","Demo Parca","EA",0,100))',
              'con.commit(); con.close()'
            )
            [System.IO.File]::WriteAllLines($seedPart, $py3)
            python $seedPart

            # login
            $form = @{ username="demo"; password="demo123" }
            $tok = (Invoke-RestMethod "$api/auth/login" -Method Post -ContentType 'application/x-www-form-urlencoded' -Body $form).access_token
            if (-not $tok) { throw "Login failed" }
            $env:CI_BEARER = $tok

            # wrapper
            $testsDir = Resolve-Path ".\backend\tests"
            $wrapper  = Join-Path $testsDir 'po-receive-wrapper.ci.ps1'
            $wrapLines = @(
              'param([string]$Api,[int]$PartId=1,[switch]$Cleanup,[switch]$CI)',
              'function Invoke-RestMethod {',
              '  [CmdletBinding()]',
              '  param(',
              '    [Parameter(Position=0)][string]$Uri,',
              '    [string]$Method,',
              '    [object]$Body,',
              '    [hashtable]$Headers,',
              '    [string]$ContentType,',
              '    [int]$TimeoutSec,',
              '    [object]$Content',
              '  )',
              '  if ($Uri -match "/auth/login") {',
              '    return [pscustomobject]@{ access_token = $env:CI_BEARER }',
              '  }',
              '  $ht = @{}',
              '  if ($PSBoundParameters.ContainsKey("Uri"))        { $ht.Uri        = $Uri }',
              '  if ($PSBoundParameters.ContainsKey("Method"))     { $ht.Method     = $Method }',
              '  if ($PSBoundParameters.ContainsKey("Body"))       { $ht.Body       = $Body }',
              '  elseif ($PSBoundParameters.ContainsKey("Content")){ $ht.Body       = $Content }',
              '  if ($PSBoundParameters.ContainsKey("Headers"))    { $ht.Headers    = $Headers }',
              '  if ($PSBoundParameters.ContainsKey("ContentType")){ $ht.ContentType= $ContentType }',
              '  if ($PSBoundParameters.ContainsKey("TimeoutSec")) { $ht.TimeoutSec = $TimeoutSec }',
              '  Microsoft.PowerShell.Utility\Invoke-RestMethod @ht',
              '}',
              '& (Join-Path (Split-Path $MyInvocation.MyCommand.Path) "po-receive-smoketest.ps1") -Api $Api -PartId $PartId -Cleanup:$Cleanup -CI:$CI'
            )
            [System.IO.File]::WriteAllLines($wrapper, $wrapLines)

            & $wrapper -Api $api -PartId 1 -Cleanup -CI
          }
          finally {
            try { Stop-Process -Id $p.Id -Force -ErrorAction SilentlyContinue } catch {}
            if (Test-Path $outLog) { Write-Host "----- uvicorn_out.log (last 200) -----"; Get-Content $outLog -Tail 200 | Write-Host }
            if (Test-Path $errLog) { Write-Host "----- uvicorn_err.log (last 200) -----"; Get-Content $errLog -Tail 200 | Write-Host }
          }

      # 🔽 YENİ: Hata olursa logları artefact olarak yükle
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: |
            ${{ runner.temp }}/uvicorn_out.log
            ${{ runner.temp }}/uvicorn_err.log
          if-no-files-found: ignore
          retention-days: 7
